on:
  push:
    branches:
      - main
      - mg/cleanup
    tags:
      - "*"
  pull_request:

name: CI
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: "clippy, rustfmt"
      - uses: Swatinem/rust-cache@v2

      # make sure all code has been formatted with rustfmt and linted with clippy
      - name: rustfmt
        run: cargo fmt -- --check --color always

      # run clippy to verify we have no warnings
      - run: cargo fetch
      - name: cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test-local:
    name: Test local
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-nextest
          locked: true
      - run: cargo fetch
      - name: cargo test build
        run: cargo build --tests -r
      - name: cargo nextest
        run: cargo nextest run -r

  coverage-check:
    name: coverage-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install protoc
        run: |
          curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v22.2/protoc-22.2-linux-x86_64.zip"
          mkdir ~/.local
          unzip protoc-22.2-linux-x86_64.zip -d ~/.local
          export PATH="PATH:$HOME/.local/bin"
      - uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-tarpaulin
          locked: true
      - name: cargo tarpaulin
        run: cargo tarpaulin --profile release --features protoc-tests

  protoc-tests:
    name: protoc-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install protoc
        run: |
          PB_REL="https://github.com/protocolbuffers/protobuf/releases"
          curl -LO $PB_REL/download/v22.2/protoc-22.2-linux-x86_64.zip
          mkdir ~/.local
          unzip protoc-22.2-linux-x86_64.zip -d ~/.local
          export PATH="PATH:$HOME/.local/bin"
      - uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-nextest
          locked: true
      - run: cargo fetch
      - name: cargo test build
        run: cargo build --tests -r --features protoc-tests
      - name: cargo nextest
        run: cargo nextest run -r --features protoc-tests

  deny-check:
    name: cargo-deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1

  release:
    name: Release
    needs: [test, deny-check]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            bin: proto-gen-cli
            # We don't enable the progress feature when targeting
            # musl since there are some dependencies on shared libs
            features: ""
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            bin: proto-gen-cli.exe
            features: progress
          - os: macOS-latest
            rust: stable
            target: x86_64-apple-darwin
            bin: proto-gen-cli
            features: progress
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          target: ${{ matrix.target }}
      - name: Install musl tools
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y musl-tools
      - name: Checkout
        uses: actions/checkout@v3
      - run: cargo fetch --target ${{ matrix.target }}
      - name: Release build
        shell: bash
        run: |
          if [ "${{ matrix.features }}" != "" ]; then
            cargo build --release --target ${{ matrix.target }} --features ${{ matrix.features }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
      - name: Package
        shell: bash
        run: |
          name=proto-gen-cli
          tag=$(git describe --tags --abbrev=0)
          release_name="$name-$tag-${{ matrix.target }}"
          release_tar="${release_name}.tar.gz"
          mkdir "$release_name"

          if [ "${{ matrix.target }}" != "x86_64-pc-windows-msvc" ]; then
              strip "target/${{ matrix.target }}/release/${{ matrix.bin }}"
          fi

          cp "target/${{ matrix.target }}/release/${{ matrix.bin }}" "$release_name/"
          cp README.md LICENSE-APACHE LICENSE-MIT "$release_name/"
          tar czvf "$release_tar" "$release_name"

          rm -r "$release_name"

          # Windows environments in github actions don't have the gnu coreutils installed,
          # which includes the shasum exe, so we just use powershell instead
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "(Get-FileHash \"${release_tar}\" -Algorithm SHA256).Hash | Out-File -Encoding ASCII -NoNewline \"${release_tar}.sha256\"" | pwsh -c -
          else
            echo -n "$(shasum -ba 256 "${release_tar}" | cut -d " " -f 1)" > "${release_tar}.sha256"
          fi
      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: "proto-gen-cli*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
